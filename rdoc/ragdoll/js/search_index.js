var search_data = {"index":{"searchIndex":["audiouploader","fileuploader","imageuploader","object","ragdoll","core","client","configuration","configurationfilenotfounderror","configurationloadunknownerror","configurationsaveerror","configurationerror","database","documenterror","embeddingerror","error","searcherror","add()","add_directory()","add_directory()","add_document()","add_document()","add_text()","client()","client()","config()","config()","configuration()","configuration()","configure()","configure()","connected?()","default_client()","default_config()","delete()","delete_document()","delete_document()","disconnect!()","docs()","document_status()","document_status()","documents()","embedding_model()","enhance_prompt()","enhance_prompt()","get()","get_context()","get_context()","get_document()","get_document()","healthy?()","healthy?()","hybrid_search()","hybrid_search()","list()","list_documents()","list_documents()","load()","method_missing()","migrate!()","migration_paths()","new()","new()","parse_provider_model()","prompt_template()","provider_credentials()","reset!()","reset_configuration!()","reset_configuration!()","resolve_model()","respond_to_missing?()","save()","search()","search()","search_analytics()","search_similar_content()","search_similar_content()","setup()","stats()","stats()","status()","update()","update_document()","update_document()","version()","annotate.rake","db.rake"],"longSearchIndex":["audiouploader","fileuploader","imageuploader","object","ragdoll","ragdoll::core","ragdoll::core::client","ragdoll::core::configuration","ragdoll::core::configuration::configurationfilenotfounderror","ragdoll::core::configuration::configurationloadunknownerror","ragdoll::core::configuration::configurationsaveerror","ragdoll::core::configurationerror","ragdoll::core::database","ragdoll::core::documenterror","ragdoll::core::embeddingerror","ragdoll::core::error","ragdoll::core::searcherror","ragdoll::add()","ragdoll::add_directory()","ragdoll::core::client#add_directory()","ragdoll::add_document()","ragdoll::core::client#add_document()","ragdoll::core::client#add_text()","ragdoll::client()","ragdoll::core::client()","ragdoll::config()","ragdoll::core::config()","ragdoll::configuration()","ragdoll::core::configuration()","ragdoll::configure()","ragdoll::core::configure()","ragdoll::core::database::connected?()","ragdoll::core::default_client()","ragdoll::core::database::default_config()","ragdoll::delete()","ragdoll::delete_document()","ragdoll::core::client#delete_document()","ragdoll::core::database::disconnect!()","ragdoll::docs()","ragdoll::document_status()","ragdoll::core::client#document_status()","ragdoll::documents()","ragdoll::core::configuration#embedding_model()","ragdoll::enhance_prompt()","ragdoll::core::client#enhance_prompt()","ragdoll::get()","ragdoll::get_context()","ragdoll::core::client#get_context()","ragdoll::get_document()","ragdoll::core::client#get_document()","ragdoll::healthy?()","ragdoll::core::client#healthy?()","ragdoll::hybrid_search()","ragdoll::core::client#hybrid_search()","ragdoll::list()","ragdoll::list_documents()","ragdoll::core::client#list_documents()","ragdoll::core::configuration::load()","ragdoll::core::configuration#method_missing()","ragdoll::core::database::migrate!()","ragdoll::core::database::migration_paths()","ragdoll::core::client::new()","ragdoll::core::configuration::new()","ragdoll::core::configuration#parse_provider_model()","ragdoll::core::configuration#prompt_template()","ragdoll::core::configuration#provider_credentials()","ragdoll::core::database::reset!()","ragdoll::reset_configuration!()","ragdoll::core::reset_configuration!()","ragdoll::core::configuration#resolve_model()","ragdoll::core::configuration#respond_to_missing?()","ragdoll::core::configuration#save()","ragdoll::search()","ragdoll::core::client#search()","ragdoll::core::client#search_analytics()","ragdoll::search_similar_content()","ragdoll::core::client#search_similar_content()","ragdoll::core::database::setup()","ragdoll::stats()","ragdoll::core::client#stats()","ragdoll::status()","ragdoll::update()","ragdoll::update_document()","ragdoll::core::client#update_document()","ragdoll::version()","",""],"info":[["AudioUploader","","AudioUploader.html","","<p>Audio uploader for audio content\n"],["FileUploader","","FileUploader.html","","<p>File uploader for documents\n"],["ImageUploader","","ImageUploader.html","","<p>Image uploader for image content\n"],["Object","","Object.html","",""],["Ragdoll","","Ragdoll.html","","<p>lib/ragdoll/core/model.rb\n<p>ragdoll/core/version.rb\n"],["Ragdoll::Core","","Ragdoll/Core.html","",""],["Ragdoll::Core::Client","","Ragdoll/Core/Client.html","",""],["Ragdoll::Core::Configuration","","Ragdoll/Core/Configuration.html","",""],["Ragdoll::Core::Configuration::ConfigurationFileNotFoundError","","Ragdoll/Core/Configuration/ConfigurationFileNotFoundError.html","",""],["Ragdoll::Core::Configuration::ConfigurationLoadUnknownError","","Ragdoll/Core/Configuration/ConfigurationLoadUnknownError.html","",""],["Ragdoll::Core::Configuration::ConfigurationSaveError","","Ragdoll/Core/Configuration/ConfigurationSaveError.html","",""],["Ragdoll::Core::ConfigurationError","","Ragdoll/Core/ConfigurationError.html","",""],["Ragdoll::Core::Database","","Ragdoll/Core/Database.html","",""],["Ragdoll::Core::DocumentError","","Ragdoll/Core/DocumentError.html","",""],["Ragdoll::Core::EmbeddingError","","Ragdoll/Core/EmbeddingError.html","",""],["Ragdoll::Core::Error","","Ragdoll/Core/Error.html","",""],["Ragdoll::Core::SearchError","","Ragdoll/Core/SearchError.html","",""],["add","Ragdoll","Ragdoll.html#method-c-add","(*args, **kwargs)",""],["add_directory","Ragdoll","Ragdoll.html#method-c-add_directory","(*args, **kwargs)","<p>Add a directory of documents to the system. @param path [String] the path to the directory containing …\n"],["add_directory","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-add_directory","(path:, recursive: false)",""],["add_document","Ragdoll","Ragdoll.html#method-c-add_document","(*args, **kwargs)","<p>Add a single document to the system. @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">add_document</span>(<span class=\"ruby-value\">path:</span> <span class=\"ruby-string\">&quot;/path/to/document.txt&quot;</span>)\n</pre>\n<p>@param …\n"],["add_document","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-add_document","(path:)","<p>Document management\n"],["add_text","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-add_text","(content:, title:, **options)",""],["client","Ragdoll","Ragdoll.html#method-c-client","(*args, **kwargs)","<p>Retrieve the client instance. @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span> = <span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">client</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">inspect</span>\n</pre>\n<p>@return [Ragdoll::Core::Client] …\n"],["client","Ragdoll::Core","Ragdoll/Core.html#method-c-client","(_config = nil)","<p>Factory method for creating clients\n"],["config","Ragdoll","Ragdoll.html#method-c-config","()","<p>Retrieve the current configuration. @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">config</span> = <span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">config</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">config</span>.<span class=\"ruby-identifier\">database_config</span>[<span class=\"ruby-value\">:adapter</span>]\n</pre>\n"],["config","Ragdoll::Core","Ragdoll/Core.html#method-c-config","()",""],["configuration","Ragdoll","Ragdoll.html#method-c-configuration","(*args, **kwargs)","<p>Access the current configuration. @param args [Array] additional arguments for configuration. @param …\n"],["configuration","Ragdoll::Core","Ragdoll/Core.html#method-c-configuration","()",""],["configure","Ragdoll","Ragdoll.html#method-c-configure","(*args, **kwargs, &block)","<p>Configure the Ragdoll module. @yieldparam config [Ragdoll::Core::Configuration] the configuration instance …\n"],["configure","Ragdoll::Core","Ragdoll/Core.html#method-c-configure","()",""],["connected?","Ragdoll::Core::Database","Ragdoll/Core/Database.html#method-c-connected-3F","()",""],["default_client","Ragdoll::Core","Ragdoll/Core.html#method-c-default_client","()",""],["default_config","Ragdoll::Core::Database","Ragdoll/Core/Database.html#method-c-default_config","()",""],["delete","Ragdoll","Ragdoll.html#method-c-delete","(*args, **kwargs)",""],["delete_document","Ragdoll","Ragdoll.html#method-c-delete_document","(*args, **kwargs)","<p>Delete a document by its identifier. @param id [String] the identifier of the document to delete. @example …\n"],["delete_document","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-delete_document","(id:)",""],["disconnect!","Ragdoll::Core::Database","Ragdoll/Core/Database.html#method-c-disconnect-21","()",""],["docs","Ragdoll","Ragdoll.html#method-c-docs","()",""],["document_status","Ragdoll","Ragdoll.html#method-c-document_status","(*args, **kwargs)","<p>Get the status of a document. @param id [String] the identifier of the document to check status. @example …\n"],["document_status","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-document_status","(id:)",""],["documents","Ragdoll","Ragdoll.html#method-c-documents","()","<p>Retrieve all documents. @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">all_docs</span> = <span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">documents</span>\n<span class=\"ruby-identifier\">all_docs</span>.<span class=\"ruby-identifier\">each</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">doc</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">doc</span>.<span class=\"ruby-identifier\">title</span> }\n</pre>\n<p>@return …\n"],["embedding_model","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-embedding_model","(content_type = :text)","<p>Resolve embedding model for content type\n"],["enhance_prompt","Ragdoll","Ragdoll.html#method-c-enhance_prompt","(*args, **kwargs)","<p>Enhance a prompt with additional context. @param prompt [String] the original prompt to enhance. @param …\n"],["enhance_prompt","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-enhance_prompt","(prompt:, context_limit: 5, **options)","<p>Primary method for RAG applications Returns context-enhanced content for AI prompts\n"],["get","Ragdoll","Ragdoll.html#method-c-get","(*args, **kwargs)",""],["get_context","Ragdoll","Ragdoll.html#method-c-get_context","(*args, **kwargs)","<p>Retrieve context for a given query. @param query [String] the query to retrieve context for. @param limit …\n"],["get_context","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-get_context","(query:, limit: 10, **options)","<p>Get relevant context without prompt enhancement\n"],["get_document","Ragdoll","Ragdoll.html#method-c-get_document","(*args, **kwargs)","<p>Retrieve a document by its identifier. @param id [String] the identifier of the document to retrieve. …\n"],["get_document","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-get_document","(id:)",""],["healthy?","Ragdoll","Ragdoll.html#method-c-healthy-3F","(*args, **kwargs)","<p>Check if the system is healthy. @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&quot;System is healthy&quot;</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">healthy?</span>\n</pre>\n<p>@return [Boolean] …\n"],["healthy?","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-healthy-3F","()","<p>Health check\n"],["hybrid_search","Ragdoll","Ragdoll.html#method-c-hybrid_search","(*args, **kwargs)","<p>Perform hybrid search combining semantic and full-text search. @param query [String] the search query …\n"],["hybrid_search","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-hybrid_search","(query:, **options)","<p>Hybrid search combining semantic and full-text search\n"],["list","Ragdoll","Ragdoll.html#method-c-list","(*args, **kwargs)",""],["list_documents","Ragdoll","Ragdoll.html#method-c-list_documents","(*args, **kwargs)","<p>List all documents in the system. @param options [Hash] options for listing documents, such as limit …\n"],["list_documents","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-list_documents","(**options)",""],["load","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-c-load","(path: nil)",""],["method_missing","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-method_missing","(method_name, *args, &block)","<p>Enable method delegation to the internal OpenStruct\n"],["migrate!","Ragdoll::Core::Database","Ragdoll/Core/Database.html#method-c-migrate-21","()",""],["migration_paths","Ragdoll::Core::Database","Ragdoll/Core/Database.html#method-c-migration_paths","()",""],["new","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-c-new","()",""],["new","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-c-new","(config = {})",""],["parse_provider_model","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-parse_provider_model","(provider_model_string)","<p>Parse a provider/model string into its components Format: “provider/model” -&gt; { provider: …\n"],["prompt_template","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-prompt_template","(template_name = :rag_enhancement)","<p>Get prompt template\n"],["provider_credentials","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-provider_credentials","(provider = nil)","<p>Get provider credentials for a given provider\n"],["reset!","Ragdoll::Core::Database","Ragdoll/Core/Database.html#method-c-reset-21","()",""],["reset_configuration!","Ragdoll","Ragdoll.html#method-c-reset_configuration-21","(*args, **kwargs)","<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">reset_configuration!</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">config</span>.<span class=\"ruby-identifier\">models</span>[<span class=\"ruby-value\">:default</span>]\n</pre>\n"],["reset_configuration!","Ragdoll::Core","Ragdoll/Core.html#method-c-reset_configuration-21","()","<p>Reset configuration (useful for testing)\n"],["resolve_model","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-resolve_model","(task_type)","<p>Resolve model with inheritance support Returns the model string for a given task, with inheritance from …\n"],["respond_to_missing?","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-respond_to_missing-3F","(method_name, include_private = false)",""],["save","Ragdoll::Core::Configuration","Ragdoll/Core/Configuration.html#method-i-save","(path: nil)",""],["search","Ragdoll","Ragdoll.html#method-c-search","(*args, **kwargs)","<p>Perform a search for documents based on a query. @param query [String] the search query string. @param …\n"],["search","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-search","(query:, **options)","<p>Semantic search++ should incorporate hybrid search\n"],["search_analytics","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-search_analytics","(days: 30)",""],["search_similar_content","Ragdoll","Ragdoll.html#method-c-search_similar_content","(*args, **kwargs)","<p>Search for content similar to a given query. @param query [String] the query to find similar content …\n"],["search_similar_content","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-search_similar_content","(query:, **options)","<p>Search similar content (core functionality)\n"],["setup","Ragdoll::Core::Database","Ragdoll/Core/Database.html#method-c-setup","(config = {})",""],["stats","Ragdoll","Ragdoll.html#method-c-stats","(*args, **kwargs)","<p>Retrieve statistics about the system. @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">stats</span> = <span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">stats</span>\n<span class=\"ruby-identifier\">puts</span> <span class=\"ruby-identifier\">stats</span>[<span class=\"ruby-value\">:total_documents</span>]\n</pre>\n<p>@return …\n"],["stats","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-stats","()","<p>Analytics and stats\n"],["status","Ragdoll","Ragdoll.html#method-c-status","(*args, **kwargs)",""],["update","Ragdoll","Ragdoll.html#method-c-update","(*args, **kwargs)",""],["update_document","Ragdoll","Ragdoll.html#method-c-update_document","(*args, **kwargs)","<p>Update a document’s information. @param id [String] the identifier of the document to update. @param …\n"],["update_document","Ragdoll::Core::Client","Ragdoll/Core/Client.html#method-i-update_document","(id:, **updates)",""],["version","Ragdoll","Ragdoll.html#method-c-version","()","<p>Retrieve the version information of the Ragdoll modules. @example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">versions</span> = <span class=\"ruby-constant\">Ragdoll</span>.<span class=\"ruby-identifier\">version</span>\n<span class=\"ruby-identifier\">versions</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["annotate.rake","","lib/tasks/annotate_rake.html","","<p># frozen_string_literal: true\n<p>require “annotate” require “annotate/annotate_models” …\n"],["db.rake","","lib/tasks/db_rake.html","","<p># frozen_string_literal: true\n<p>require “rake”\n<p>namespace :db do\n"]]}}